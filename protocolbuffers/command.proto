package sawmill;

import "logevent.proto";

/*
 * Detailed step of a filter
 */
message FilterStep {
	required string plugin       = 1; // The plugin to use
	required int32  stepnumber   = 2; // Number filled in when loading/generating the filter structure

	// Options for matching
	repeated string requireTag   = 3;
	repeated Field requireField  = 4;
	optional string requireMatch = 5;

	// Options for plugins
	repeated Field parameter     = 6;
}

/*
 * A filter to apply to log-messages.
 * Note that this is pre-processed when loading a config-file, and this only applies to one type of log-messages.
 * The pre-processor should insert 'generic' or multi-type filter-steps to all 
 */
message Filter
{
	required int32 filterId   = 1; // Filter ID generated by the dispatcher
	required string type      = 2; // Type should always be filled in.
	repeated FilterStep step  = 3; // List of steps to perform for this filter in the required order
}

message FilterConfig
{
	required int32 version    = 1; // The version number since the sawmill start, increased by the dispatcher when the config is reloaded
	repeated Filter filter    = 2; // The list of filters to apply
}

/*
 * Message flow is as following:
 * - Filter Slave connects to dispatcher, sends "HELLO" command with the list of plugins + it's version it supports
 * - Dispatcher sends back a FilterConfig
 */
message FilterMessage {
	enum FilterCommand {
		HELLO      = 0;
		CONFIG     = 1;
		BYE        = 2;
		PROCESS    = 3;
		CONTINUE   = 4;
	}
	enum ReturnStatus {
		OK = 0;
		KO = 1;
		// add more statuses
	}

	// Default fields
	required FilterCommand command = 1 [ default = PROCESS ];

	optional ReturnStatus status  = 2; // On response, contains the status message
	optional string statusmessage = 3; // Optional message to provide. Mostly for debug purposes

	///////////////////////////////
	
	// HELLO fields
	repeated string plugin        = 4; // Slave sends list of available plugins on connect.
	optional int32 slaveId        = 5; // Master sends back a slave ID. 

	// CONFIG fields
	optional FilterConfig config  = 6;
	
	// BYE has no parameters

	// PROCESS message
	optional LogEvent event       = 7; // Event to process

	// CONTINUE sends back the filter-id and filter-step of the last executed filter
	optional int32 filter_id      = 8;
	optional int32 filter_step    = 9;
}

